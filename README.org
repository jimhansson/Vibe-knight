#+TITLE: vibe-knight
#+AUTHOR: Your Name
#+OPTIONS: toc:nil

* vibe-knight
A 2D roguelike game in Common Lisp using SDL2, inspired by Zelda 3.

* Structure
- src/ :: all source code
- doc/ :: documentation
- vibe-knight.asd :: ASDF system file
- build.lisp :: script to build an executable

* Build and Run
1. Install SDL2, SBCL, and Lisp dependencies:
   #+BEGIN_SRC sh
   sudo apt-get install sbcl libsdl2-dev
   # Install Quicklisp if you don't have it
   # Download and install sdl2 bindings for Common Lisp
   (ql:quickload :sdl2)
   #+END_SRC
2. Run the game directly in Lisp:
   #+BEGIN_SRC lisp
   (asdf:load-system :vibe-knight)
   (vibe-knight:main)
   #+END_SRC
3. Build a standalone executable with SBCL:
   #+BEGIN_SRC sh
   sbcl --script build.lisp
   # This creates an executable named 'vibe-knight' in the project folder
   ./vibe-knight
   #+END_SRC

* Using Roswell for Common Lisp Development
Roswell is a command-line launcher and environment manager for Common Lisp. It makes it easy to install, switch, and run different Lisp implementations, manage scripts, and set up development environments.

** Install Roswell (Linux)
#+BEGIN_SRC sh
curl -L https://raw.githubusercontent.com/roswell/roswell/release/scripts/install-for-ci.sh | sh
#+END_SRC
Or, if available on your system:
#+BEGIN_SRC sh
sudo apt-get install roswell
#+END_SRC
Or with Homebrew (Linux or macOS):
#+BEGIN_SRC sh
brew install roswell
#+END_SRC

** Basic Usage
- Start a REPL: ~ros run~
- Install SBCL: ~ros install sbcl~
- Set SBCL as default: ~ros use sbcl~
- List available implementations: ~ros list~

** Using Roswell with this project
You can use Roswell to run and test this project with your preferred Lisp implementation. For example:
#+BEGIN_SRC sh
ros run --load build.lisp
#+END_SRC
Or to run tests:
#+BEGIN_SRC sh
ros run --load src/package.lisp --load src/world-test.lisp
#+END_SRC
See https://roswell.github.io/ for more details.

* Issue Tracking with git-bug
This project uses [[https://github.com/MichaelMure/git-bug][git-bug]] for distributed bug and issue tracking. git-bug stores issues directly in your git repository, so you can work with issues offline and sync them with others via git.

** Install git-bug
Note: git-bug is not the same as Roswell. The .deb file provided here is for git-bug, not Roswell.
If git-bug is not available in your package manager, you can manually install it using the provided .deb file:
#+BEGIN_SRC sh
sudo dpkg -i git-bug.deb
#+END_SRC
Or download the latest release from [[https://github.com/MichaelMure/git-bug/releases][git-bug releases]]:
#+BEGIN_SRC sh
# Example for Linux (x86_64)
wget https://github.com/MichaelMure/git-bug/releases/latest/download/git-bug-linux-amd64
chmod +x git-bug-linux-amd64
sudo mv git-bug-linux-amd64 /usr/local/bin/git-bug
#+END_SRC
Or use Homebrew:
#+BEGIN_SRC sh
brew install git-bug
#+END_SRC

** Basic Usage
- Initialize git-bug in your repo:
  #+BEGIN_SRC sh
  git bug init
  #+END_SRC
- Create a new issue:
  #+BEGIN_SRC sh
  git bug new
  #+END_SRC
- List issues:
  #+BEGIN_SRC sh
  git bug list
  #+END_SRC
- Show an issue:
  #+BEGIN_SRC sh
  git bug show <issue-id>
  #+END_SRC
- Sync issues with remotes:
  #+BEGIN_SRC sh
  git bug push
  git bug pull
  #+END_SRC
See https://github.com/MichaelMure/git-bug for more details and advanced usage.

* Developer Log
Project progress, decisions, and daily notes are tracked in =doc/diary.org= using org-mode. This developer log includes:
- Daily summaries of work completed
- Project milestones and important decisions
- Notes on design, testing, and future plans

To contribute to the log, add a new entry under the appropriate date in =doc/diary.org=. The format uses org-mode headings for year, month, and full date, for example:
#+BEGIN_SRC org
* 2025
** May
*** 2025-05-16
- Notes about today's work...
#+END_SRC

Review the log to understand the project's history and ongoing development.

* Note
This is a basic structure. Add more logic and graphics as needed!
