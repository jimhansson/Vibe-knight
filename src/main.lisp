(defpackage :vibe-knight
  (:use :cl :sdl2)
  (:local-nicknames (:v :org.shirakumo.verbose)))
(in-package :vibe-knight)

(defparameter *window* nil)
(defparameter *renderer* nil)

;; Handle Ctrl+C (SIGINT) to quit gracefully (SBCL-specific)
#+sbcl
(handler-bind ((sb-sys:interactive-interrupt
                (lambda (c)
                  (declare (ignore c))
                  (sdl2:push-quit-event))))
  (defun main ()
    (sdl2:init :everything)
    (setf *window* (sdl2:create-window :title "vibe-knight" :w 640 :h 480 :flags '(:shown)))
    (setf *renderer* (sdl2:create-renderer *window* -1 '(:software)))
    (sdl2:set-render-draw-color *renderer* 0 0 0 255)
    (sdl2:render-clear *renderer*)
    (sdl2:render-present *renderer*)
    (let ((gamepad (when (> (sdl2:joystick-count) 0)
                     (sdl2:game-controller-open 0))))
      (unwind-protect
           (sdl2:with-event-loop ()
             (:quit (&rest args)
               (v:debug :main "Quit event args: ~S" args)
               (setf gamepad (progn (when gamepad (sdl2:game-controller-close gamepad)) nil)))
             (:keydown (&key sym)
               (when (or (string= sym "q") (string= sym "Q"))
                 (sdl2:push-quit-event))
               (v:debug :main "Keydown: ~S" sym))
             (:controllerbuttondown (&rest args)
               (v:debug :main "Controllerbuttondown args: ~S" args))
             (:idle ()
               (sdl2:set-render-draw-color *renderer* 0 0 0 255)
               (sdl2:render-clear *renderer*)
               ;; Draw a moving red rectangle to show rendering is working
               (let* ((time (mod (get-internal-real-time) 1000))
                      (x (truncate (* 600 (/ time 1000.0))))
                      (y 200)
                      (w 40)
                      (h 40))
                 (sdl2:set-render-draw-color *renderer* 255 0 0 255)
                 (sdl2:render-fill-rect *renderer* x y w h))
               (sdl2:render-present *renderer*)
               (sdl2:delay 16)))
        (progn
          (v:debug :main "Exiting...")
          (when gamepad (sdl2:game-controller-close gamepad))
          (sdl2:destroy-renderer *renderer*)
          (sdl2:destroy-window *window*)
          (sdl2:quit))))))

;; For other implementations, just define main without handler-bind
#-sbcl
(defun main ()
  (sdl2:init :everything)
  (setf *window* (sdl2:create-window :title "vibe-knight" :w 640 :h 480 :flags '(:shown)))
  (setf *renderer* (sdl2:create-renderer *window* -1 '(:software)))
  (sdl2:set-render-draw-color *renderer* 0 0 0 255)
  (sdl2:render-clear *renderer*)
  (sdl2:render-present *renderer*)
  (let ((gamepad (when (> (sdl2:joystick-count) 0)
                   (sdl2:game-controller-open 0))))
    (unwind-protect
         (sdl2:with-event-loop ()
           (:quit () (setf gamepad (progn (when gamepad (sdl2:game-controller-close gamepad)) nil)))
           (:keydown (&key sym)
             (when (or (string= sym "q") (string= sym "Q"))
               (sdl2:push-quit-event))
             (v:debug :main "Keydown: ~S" sym))
           (:controllerbuttondown (&rest args)
             (v:debug :main "Controllerbuttondown args: ~S" args))
           (:idle ()
             (sdl2:set-render-draw-color *renderer* 0 0 0 255)
             (sdl2:render-clear *renderer*)
             ;; Draw a moving red rectangle to show rendering is working
             (let* ((time (mod (get-internal-real-time) 1000))
                    (x (truncate (* 600 (/ time 1000.0))))
                    (y 200)
                    (w 40)
                    (h 40))
               (sdl2:set-render-draw-color *renderer* 255 0 0 255)
               (sdl2:render-fill-rect *renderer* x y w h))
             (sdl2:render-present *renderer*)
             (sdl2:delay 16)))
      (progn
        (when gamepad (sdl2:game-controller-close gamepad))
        (sdl2:destroy-renderer *renderer*)
        (sdl2:destroy-window *window*)
        (sdl2:quit)))))
